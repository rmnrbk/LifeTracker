@using LifeTracker.Services
@using LifeTracker.Models
@using LifeTracker.Models.BaseModels

@page "/edittags"

@inject EntityService EntityService


<h3>Редактировать тэги</h3>

<button @onclick="ToggleAddTagModal" class="btn btn-primary btn-show-model">Добавить</button>

@if (IsVisibleAddTagModal)
{
    <AddTagModalDialog OnFinishModalCallback="OnAddModalCloseClick" />
}

@if (IsVisibleEditTagModal)
{
    <EditTagModalDialog EditingTagId="EditingTag.Id" OnFinishModalCallback="OnEditModalCloseClick"/>
}

<div class="tags">
    @foreach (var tag in Tags)
    {
        <div class="tag-block" @onclick="() => ToggleEditTagModal(tag)">
            <span class="tag-name">
                @tag.Name
            </span>
        </div>
    }
</div>


@code {
    private List<Tag> Tags => EntityService.GetTags();
    private Tag EditingTag;

    private bool IsVisibleAddTagModal { get; set; }
    private bool IsVisibleEditTagModal { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        await EntityService.InitializeAsync();
        // await UpdateView();
    }

    private void ToggleEditTagModal(Tag tag)
    {
        if (EditingTag == null)
        {
            EditingTag = tag;
            IsVisibleEditTagModal = true;
        }
    }

    private void ToggleAddTagModal()
    {
        IsVisibleAddTagModal = !IsVisibleAddTagModal;
    }

    private async void OnAddModalCloseClick()
    {
        IsVisibleAddTagModal = false;
        await UpdateView();
    }
    
    private async void OnEditModalCloseClick()
    {
        IsVisibleEditTagModal = false;
        EditingTag = null;
        
        await UpdateView();
    }

    private async Task UpdateView()
    {
        await InvokeAsync(StateHasChanged);
    }
    
}