@page "/report"
@using LifeTracker.Services
@using Microsoft.AspNetCore.Mvc.Rendering

@inject EntityService EntityService
@inject ReportService ReportService

<div class="piechart-and-filter">
    <div class="my-piechart">
        <PieChart @ref="pieChart" Width="500" Class="mb-5"/>
    </div>

    <div class="tags-filter-block">
        <div class="all-datetimes-block">
            <div class="datetime-block">
                <input
                    type="date"
                    id="start-datetime"
                    class="date-time-picker"
                    @bind-value="FromDateTime"/>
            </div>

            <Icon Name="IconName.DashLg"/>

            <div class="datetime-block">
                <input
                    type="date"
                    id="end-datetime"
                    class="date-time-picker"
                    @bind="ToDateTime"/>
            </div>

            <Button Size="Size.ExtraSmall" @onclick="OnShiftDateBackClicked">
                <Icon Name="IconName.ArrowLeftCircleFill" Size="IconSize.x5"/>
            </Button>

            <Button Size="Size.ExtraSmall" @onclick="OnShiftDateNextClicked">
                <Icon Name="IconName.ArrowRightCircleFill" Size="IconSize.x5"/>
            </Button>
        </div>

        <div class="tags-filter">
            @if (TagsMSList != null)
            {
                @foreach (var tagItem in TagsMSList)
                {
                    <div class="tag-item">
                        <input id="tag-item-id-@tagItem.Value" type="checkbox" @bind="tagItem.Selected" @onclick="() => HandleItemClick(tagItem)"/>
                        <label class="tag-item-label" for="tag-item-id-@tagItem.Value">@tagItem.Text</label>
                    </div>
                }
            }
        </div>

        <div class="help-filter-btns">
            <button class="btn btn-primary" @onclick="async () => await OnSetDefaultClicked()">Прямые</button>
            <button class="btn btn-primary" @onclick="async () => await OnSetAllInPeriodClicked()">Косвенные</button>
        </div>
    </div>
</div>


@code {
    private PieChart pieChart = default!;
    private PieChartOptions pieChartOptions = default!;
    private ChartData chartData = default!;

    private MultiSelectList TagsMSList;
    
    private DateTime _fromDateTime = DateTime.Today;
    private DateTime FromDateTime
    {
        get => _fromDateTime;
        set
        {
            _fromDateTime = value;
            if (_fromDateTime.Date > _toDateTime.Date)
            {
                _toDateTime = _fromDateTime + TimeSpan.FromDays(1) - TimeSpan.FromSeconds(1);
            }
            OnDateChanged();
        }
    }
    
    private DateTime _toDateTime = DateTime.Today + TimeSpan.FromDays(1) - TimeSpan.FromSeconds(1);
    private DateTime ToDateTime
    {
        get => _toDateTime;
        set
        {
            _toDateTime = value + TimeSpan.FromDays(1) - TimeSpan.FromSeconds(1);
            if (_toDateTime.Date < _fromDateTime.Date)
            {
                _fromDateTime = value;
            }
            OnDateChanged();
        }
    }
    
    
    protected override void OnInitialized()
    {
        pieChartOptions = new PieChartOptions
        {
            Responsive = true,
        };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await EntityService.InitializeAsync();
            InitializeData();
            await InvokeAsync(StateHasChanged);
            await pieChart.InitializeAsync(chartData, pieChartOptions);
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private void InitializeData()
    {
        var tags = EntityService.GetTags();
        var activities = EntityService.GetActivities();
        
        ReportService.Initialize(tags, activities, FromDateTime, ToDateTime);
        
        var displayedTags = ReportService.GetDisplayedTags();
        var filteredTagIds = ReportService
            .GetFilteredTags()
            .Select(dt => dt.Tag.Id)
            .ToList();;
        
        TagsMSList = new MultiSelectList(displayedTags, "Tag.Id", "Tag.Name");
        foreach (var item in TagsMSList)
        {
            if (filteredTagIds.Contains(Convert.ToInt32(item.Value)))
                item.Selected = true;
        }

        chartData = GenerateChartData();
    }
    
    private void UpdateData()
    {
        var selectedTagsIds = TagsMSList
            .Where(i => i.Selected)
            .Select(i => Convert.ToInt32(i.Value))
            .ToList();
        ReportService.FilterTags(selectedTagsIds);
        
        chartData = GenerateChartData();
    }

    private ChartData GenerateChartData()
    {
        return new ChartData
        {
            Labels = ReportService.GetTagsNames(),
            Datasets = GetDatasets(),
        };
    }

    private async void OnDateChanged()
    {
        InitializeData();
        await pieChart.UpdateAsync(chartData, pieChartOptions); 
    }

    private async Task HandleItemClick(SelectListItem clickedItem)
    {
        clickedItem.Selected = !clickedItem.Selected;

        UpdateData();
        await pieChart.UpdateAsync(chartData, pieChartOptions);
    }

    private void OnShiftDateBackClicked()
    {
        if (FromDateTime.Date == ToDateTime.Date)
        {
            ToDateTime = ToDateTime.Date - TimeSpan.FromDays(1);
        }
        else
        {
            ToDateTime = FromDateTime;
        }
    }
    
    private void OnShiftDateNextClicked()
    {
        if (FromDateTime.Date == ToDateTime.Date)
        {
            FromDateTime = FromDateTime.Date + TimeSpan.FromDays(1);
        }
        else
        {
            FromDateTime = ToDateTime.Date;
        }
    }

    private async Task OnSetAllInPeriodClicked()
    {
        var nonZeroSecondsSpentIds = ReportService.GetNonZeroSecondsSpentIds();
        
        foreach (var item in TagsMSList)
        {
            item.Selected = nonZeroSecondsSpentIds.Contains(Convert.ToInt32(item.Value));
        }
        
        UpdateData();
        await pieChart.UpdateAsync(chartData, pieChartOptions);
    }

    private async Task OnSetDefaultClicked()
    {
        var directlyActiveIds = ReportService.GetDirectlyActiveIds();
        
        foreach (var item in TagsMSList)
        {
            item.Selected = directlyActiveIds.Contains(Convert.ToInt32(item.Value));
        }
        
        UpdateData();
        await pieChart.UpdateAsync(chartData, pieChartOptions);
    }
    
    private List<IChartDataset> GetDatasets()
    {
        var data = ReportService.GetData();
        var bgColors = ReportService.GetRandomBackgroundColors(data.Count);
        var datasets = new List<IChartDataset>
        {
            new PieChartDataset
            {
                Label = "ч,м",
                Data = data,
                BackgroundColor = bgColors
            }
        };
        return datasets;
    }

}