@page "/"
@using LifeTracker.Services
@using LifeTracker.Models
@using LifeTracker.Models.BaseModels

@inject NavigationManager NavigationManager
@inject EntityService EntityService
@inject DisplayedTagService DTService


@if (IsVisibleEditActivityModal)
{
    <EditActivityModalDialog EditingActivity="EditingActivity" OnFinishModalCallback="OnEditActivityModalCloseClick" />
}

<div class="header">
    <h1>Тэги</h1>
    <button class="edit-tags-btn" @onclick='() => NavigationManager.NavigateTo("/edittags")'>Редактировать</button>
</div>

<div class="current-tag">
    @if (ActiveDTags.Count > 0)
    {
        <span class="current-tag__do-something">Выполняются:</span>
        <div class="current-tag__active-tags">
            @foreach(var activeDTag in ActiveDTags)
            {
                <span class="current-tag__element" @onclick="()=> OnActiveTagClicked(activeDTag.Tag.Id)">@activeDTag.Tag.Name</span>
            }
        </div>
    }
    else
    {
        <span class="current-tag__do-nothing">Сейчас ничего не выполняется</span>
    }
</div>

<MyTags OnClickCallback="OnChangeHandler"/>


@code {
    private List<DisplayedTag> ActiveDTags => DTService.ActiveDTags;
    
    private bool IsVisibleEditActivityModal { get; set; }
    private Activity EditingActivity { get; set; }

    private async void OnChangeHandler()
    {
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnActiveTagClicked(int tagId)
    {
        EditingActivity = await EntityService.GetRunningActivityAsync(tagId);
        IsVisibleEditActivityModal = true;
        
        await InvokeAsync(StateHasChanged); 
    }

    private async Task OnEditActivityModalCloseClick()
    {
        var tags = await EntityService.GetTagsAsync();
        var activities = await EntityService.GetActivitiesAsync();
        DTService.Initialize(tags, activities);
        IsVisibleEditActivityModal = false;
        EditingActivity = null;
        
        await InvokeAsync(StateHasChanged); 
    }
}