@using Microsoft.AspNetCore.Mvc.Rendering
@using LifeTracker.Models
@using LifeTracker.Services
@using NuGet.Packaging

@inject TagsStateService TagsStateService


<div class="modal fade show my-background" aria-modal="true" @onkeydown="@OnKeyDown" autofocus >
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Редактировать активность</h4>
                <button type="button" class="btn btn-primary" @onclick="OnCloseClick">x</button>
            </div>
            <div class="modal-body my-modal-body">
                <div id="tags-block">
                    @foreach (var tagItem in TagsSelectList)
                    {
                        <div class="tag-item">
                            <input class="tag-item-radio" id="tag-item-id-@tagItem.Value" type="radio" checked="@tagItem.Selected" @bind="tagItem.Selected" @onclick="() => HandleItemClick(tagItem)" name="radioname"/>
                            <label class="tag-item-label" for="tag-item-id-@tagItem.Value">@tagItem.Text</label>
                        </div>
                    }
                </div>
                <div id="all-datetimes-block">
                    <div class="datetime-block">
                        <label for="start-datetime" class="datetime-label">От:</label>
                        <input
                            type="datetime-local"
                            id="start-datetime"
                            class="date-time-picker"
                            @bind="NewStartDatetime"/>
                    </div>
                    <div class="datetime-block">
                        <label for="end-datetime" class="datetime-label">До:</label>
                        <input
                            type="datetime-local"
                            id="end-datetime"
                            class="date-time-picker"
                            @bind="NewEndDatetime"/>
                    </div>
                </div>
            </div>
            <div class="modal-footer edit-footer">
                <button type="button" class="btn btn-delete" @onclick="OnDeleteClick">Удалить</button>
                <button type="button" class="btn btn-primary" @onclick="OnConfirmClick">Сохранить</button>
            </div>
        </div>
    </div>
</div>


@code {
    [Parameter]
    public EventCallback OnFinishModalCallback { get; set; }
    
    [Parameter]
    public Activity EditingActivity { get; set; }

    private SelectList TagsSelectList;

    private List<Tag> Tags => TagsStateService.Tags;

    private DateTime NewStartDatetime { get; set; }
    private DateTime? NewEndDatetime { get; set; }
    
    protected override void OnInitialized()
    {
        SetupTagsSelectList();
        NewStartDatetime = EditingActivity.Start;
        NewEndDatetime = EditingActivity.End;
    }
    
    private void SetupTagsSelectList()
    {
        TagsSelectList = new SelectList(Tags, "TagId", "Name");
        foreach (var item in TagsSelectList)
        {
            if (Convert.ToInt32(item.Value) == EditingActivity.TagId)
                item.Selected = true;
        }
    }

    private string DateTimeToHtml(DateTime dateTime)
    {
        return dateTime.ToString("yyyy-MM-ddTHH:mm");
    }

    private async void HandleItemClick(SelectListItem clickedItem)
    {
        var clickedTagId = Convert.ToInt32(clickedItem.Value);

        foreach (var item in TagsSelectList)
        {
            item.Selected = Convert.ToInt32(item.Value) == clickedTagId;
        }
        
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnCloseClick()
    {
        await OnFinishModalCallback.InvokeAsync();
    }
    
    private async Task OnConfirmClick()
    {
        if (!TagsStateService.AreStartEndDatesValid(NewStartDatetime, NewEndDatetime))
            return;
        
        var newTagId = Convert.ToInt32(TagsSelectList.First(item => item.Selected).Value);

        await TagsStateService.EditActivity(EditingActivity, newTagId, NewStartDatetime, NewEndDatetime);
        await TagsStateService.SetupTagsAndActivities();
        
        await OnFinishModalCallback.InvokeAsync();
    }

    private async Task OnDeleteClick()
    {
        await TagsStateService.DeleteActivity(EditingActivity.ActivityId);
        await TagsStateService.SetupTagsAndActivities();
        
        await OnFinishModalCallback.InvokeAsync();
    }
    
    private async void OnKeyDown(KeyboardEventArgs e)
    {
        if (e.Code == "Escape")
        {
            await OnCloseClick();
        }
        else if (e.Code is "Enter" or "NumpadEnter")
        {
            await OnConfirmClick();
        }
    }
}