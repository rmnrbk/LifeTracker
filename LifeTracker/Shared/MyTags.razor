@using LifeTracker.Services
@using LifeTracker.Models

@inject EntityService EntityService
@inject DisplayedTagService DTService

<div class="container">
    <div class="row">
        <div class="col-12">
            @foreach (var dTag in dTags)
            {
                <div class="tag-content @(TagClassName(dTag)) mb-3" @onclick="() => Toggle(dTag)">
                    <div class="title-and-times d-flex justify-content-between align-items-center">
                        <div class="tags__tag-content__title">
                            @dTag.Tag.Name
                        </div>
                        @if (dTag.TotalSecondsSpent == 0 && dTag.LastSecondsSpent == 0)
                        {
                            <div class="tags__tag-content__timer__total">&nbsp</div>
                        }
                        else
                        {
                            <div class="tags__tag-content__timer__total">
                                @ToHoursMins(dTag.TotalSecondsSpent)
                            </div>
                        }
                    </div>
                    <div class="tags__tag-content__timer d-flex justify-content-between align-items-center">
                        @if (dTag.LastStartTime != null || dTag.LastEndTime != null)
                        {
                            <div class="last-today-times">
                                @ToHoursMins(dTag.LastStartTime) - @ToHoursMins(dTag.LastEndTime)
                            </div>
                        }
                        else
                        {
                            <div class="last-today-times">&nbsp</div>
                        }
                        @if (dTag.LastSecondsSpent != 0)
                        {
                            <div class="tags__tag-content__timer__current">
                                @ToHoursMins(dTag.LastSecondsSpent)
                            </div>
                        }
                        else
                        {
                            <div class="tags__tag-content__timer__current">&nbsp</div>
                        }
                    </div>
                </div>
            }
        </div>
    </div>
</div>




@code {
    [Parameter]
    public EventCallback OnClickCallback { get; set; }

    private List<DisplayedTag> dTags => DTService.DTags;

    protected override async Task OnInitializedAsync()
    {
        await EntityService.InitializeAsync();
        var tags = await EntityService.GetTagsAsync();
        var activities = await EntityService.GetActivitiesAsync();
        DTService.Initialize(tags, activities);
        DTService.SetOnChangeHandler(OnChangeHandler);

        await UpdateView();
    }

    private async void OnChangeHandler()
    {
        await InvokeAsync(StateHasChanged);
    }

    private async void Toggle(DisplayedTag dTag)
    {
        if (dTag.Status == DisplayedTagStatus.Inactive)
        {
            await EntityService.CreateActivityAsync(dTag.Tag.Id, DateTime.Now);
        }
        else
        {
            await EntityService.FinishRunningActivityAsync(dTag.Tag.Id, DateTime.Now);
        }

        DTService.Update(dTag);
        await UpdateView();
    }

    private async Task UpdateView()
    {
        await InvokeAsync(StateHasChanged);
        await OnClickCallback.InvokeAsync();
    }

    private string ToHoursMins(DateTime? datetime)
    {
        return datetime.HasValue ? datetime.Value.ToString("HH:mm") : "...";
    }

    private string ToHoursMins(int secondsSpent)
    {
        int hours = secondsSpent / 3600;
        int minutes = (secondsSpent % 3600) / 60;
        
        return $"{hours:D2}:{minutes:D2}";
    }

    private string TagClassName(DisplayedTag displayedTag) => displayedTag.Status switch
    {
        DisplayedTagStatus.Inactive => "tags__tag-content",
        DisplayedTagStatus.DependentlyActive => "tags__tag-content tags__tag-content__dependently-active",
        DisplayedTagStatus.DependentlyDisabled => "tags__tag-content tags__tag-content__dependently-disabled",
        _ => "tags__tag-content tags__tag-content__directly-active"
    };
}
